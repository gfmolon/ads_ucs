-- Caminho para Python (ajustado para macOS)
vim.g.python3_host_prog = '/usr/local/bin/python3'

-- Definições básicas
vim.opt.number = true
vim.opt.relativenumber = false
vim.opt.tabstop = 4
vim.opt.shiftwidth = 4
vim.opt.expandtab = true
vim.opt.termguicolors = true
vim.opt.clipboard = "unnamedplus"
vim.opt.cursorline = true
vim.opt.swapfile = false
vim.opt.autoindent = true
vim.opt.smartindent = true
vim.opt.smarttab = true
vim.opt.mouse = ""

-- Melhorias de desempenho e conforto
vim.opt.updatetime = 300
vim.opt.timeoutlen = 500
--vim.opt.colorcolumn = "80"--

-- Destaque dinâmico da linha atual
vim.cmd [[
  augroup CursorLine
    autocmd!
    autocmd InsertLeave,WinEnter * set cursorline
    autocmd InsertEnter,WinLeave * set nocursorline
  augroup END
]]

-- Autocomando que insere 2 linhas vazias ao final de arquivos
vim.api.nvim_create_autocmd("BufWritePre", {
  pattern = "*",
  callback = function()
    local lastline = vim.fn.line('$')
    local line = vim.fn.getline(lastline)
    if line ~= "" then
      vim.fn.append(lastline, {"", ""})
    end
  end
})

-- Autosalvar ao perder o foco
vim.api.nvim_create_autocmd("FocusLost", {
  pattern = "*",
  command = "silent! wa",
})

-- Lazy.nvim - Plugin manager
local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"
if not vim.loop.fs_stat(lazypath) then
  vim.fn.system({
    "git", "clone", "--filter=blob:none",
    "https://github.com/folke/lazy.nvim.git", lazypath
  })
end
vim.opt.rtp:prepend(lazypath)

-- Plugins
require("lazy").setup({
  { "folke/tokyonight.nvim", lazy = false, priority = 1000 },
  { "neovim/nvim-lspconfig" },
  {
    "hrsh7th/nvim-cmp",
    dependencies = {
      "hrsh7th/cmp-nvim-lsp",
      "L3MON4D3/LuaSnip",
    }
  },
  { "nvim-tree/nvim-tree.lua", dependencies = { "nvim-tree/nvim-web-devicons" } },
  { "nvim-lualine/lualine.nvim", dependencies = { "nvim-tree/nvim-web-devicons" } },
  { "folke/which-key.nvim", config = true },
  {
    "nvim-telescope/telescope.nvim",
    dependencies = { "nvim-lua/plenary.nvim" }
  },
  {
    "lukas-reineke/indent-blankline.nvim",
    main = "ibl",
    opts = {}
  },
})

-- Tema Tokyonight Night
vim.cmd[[colorscheme tokyonight-night]]

-- Diagnóstico LSP com visual melhorado
vim.diagnostic.config({
  virtual_text = true,
  signs = true,
  update_in_insert = false,
  underline = true,
  severity_sort = true,
})

-- LSP Python e C
local lspconfig = require("lspconfig")
lspconfig.pyright.setup {
  settings = { python = { pythonPath = "/usr/local/bin/python3" } },
}
lspconfig.clangd.setup{}

-- Autocompletion (desativado por padrão)
local cmp = require'cmp'
local luasnip = require'luasnip'

cmp.setup({
  enabled = false,
  snippet = {
    expand = function(args)
      luasnip.lsp_expand(args.body)
    end,
  },
  mapping = {
    ['<CR>'] = cmp.mapping.confirm({ select = true })
  },
  sources = {},
})

-- Nvim Tree
local api = require("nvim-tree.api")
require("nvim-tree").setup({
  sort = {
    sorter = "name",
    folders_first = true,
  },
  view = {
    width = 30,
    side = "left",
    preserve_window_proportions = true,
    number = false,
    relativenumber = false,
    signcolumn = "yes",
  },
  renderer = {
    group_empty = true,
    highlight_git = true,
    icons = {
      show = {
        file = true,
        folder = true,
        folder_arrow = true,
        git = true,
      },
    },
  },
  filters = {
    dotfiles = false,
    custom = { ".git", "node_modules", ".cache" },
  },
  actions = {
    open_file = {
      quit_on_open = false,
      window_picker = { enable = false },
    },
  },
  git = {
    enable = true,
    ignore = false,
  },
  hijack_netrw = true,
  open_on_tab = false,
  reload_on_bufenter = true,
  update_focused_file = {
    enable = true,
    update_root = true,
  },
  on_attach = function(bufnr)
    local function opts(desc)
      return { desc = "nvim-tree: " .. desc, buffer = bufnr, noremap = true, silent = true, nowait = true }
    end

    api.config.mappings.default_on_attach(bufnr)

    vim.keymap.set('n', '<CR>', api.node.open.edit, opts('Open File'))
    vim.keymap.set('n', 'g', api.node.open.edit, opts('Open File'))
    vim.keymap.set('n', 'j', 'j', opts('Move Down'))
    vim.keymap.set('n', 'k', 'k', opts('Move Up'))
    vim.keymap.set('n', '<C-z>', api.tree.focus, opts('Focus Tree'))
    vim.keymap.set('n', '<C-f>', api.tree.focus, opts('Focus Tree'))
  end,
})

vim.keymap.set('n', '<C-n>', ':NvimTreeToggle<CR>', { noremap = true, silent = true })
vim.keymap.set('n', '<C-z>', ':NvimTreeFocus<CR>', { noremap = true, silent = true })
vim.keymap.set('n', '<C-f>', ':NvimTreeFocus<CR>', { noremap = true, silent = true })

-- Telescope keymaps
vim.keymap.set('n', '<leader>ff', ':Telescope find_files<CR>', { noremap = true, silent = true })
vim.keymap.set('n', '<leader>fg', ':Telescope live_grep<CR>', { noremap = true, silent = true })

-- Lualine com tema Tokyonight
require('lualine').setup {
  options = { theme = 'tokyonight' }
}

-- indent-blankline (visual de indentação)
require("ibl").setup {
  indent = {
    char = "│",
  },
  scope = {
    enabled = true,
    show_start = false,
    show_end = false,
  },
}

-- Terminal para macOS
vim.opt.shell = '/bin/zsh'
vim.opt.shellcmdflag = '-c'
vim.opt.shellquote = ''
vim.opt.shellxquote = ''

vim.api.nvim_command('command! -nargs=0 T botright split | terminal')

vim.api.nvim_create_autocmd('TermOpen', {
  pattern = '*',
  callback = function()
    vim.cmd('startinsert')
  end,
})

vim.api.nvim_create_autocmd('BufEnter', {
  pattern = '*',
  callback = function()
    vim.cmd('lcd %:p:h')
  end,
})

vim.keymap.set('n', ';', ':', { noremap = true })
vim.keymap.set('v', ';', ':', { noremap = true })

vim.opt.title = true
vim.opt.titlestring = "%t"
