-- Caminho para Python (ajustado para macOS)
vim.g.python3_host_prog = '/usr/local/bin/python3'

-- Definições básicas
vim.opt.number = true
vim.opt.relativenumber = true
vim.opt.tabstop = 4
vim.opt.shiftwidth = 4
vim.opt.expandtab = true
vim.opt.termguicolors = true
vim.opt.clipboard = "unnamedplus"
vim.opt.cursorline = true
vim.opt.swapfile = false

-- Destaque da linha atual
vim.cmd [[
  highlight CursorLine guibg=#2c313a
]]

-- Atalhos personalizados
vim.keymap.set('n', '<C-t>', ':belowright split | terminal<CR>', { noremap = true, silent = true })
vim.keymap.set('n', ';', ':', { noremap = true })
vim.keymap.set('v', ';', ':', { noremap = true })

-- Autocomando que insere 3 linhas vazias ao final de arquivos
vim.api.nvim_create_autocmd("BufWritePre", {
  pattern = "*",
  callback = function()
    local lastline = vim.fn.line('$')
    local line = vim.fn.getline(lastline)
    if line ~= "" then
      vim.fn.append(lastline, {"", ""})
    end
  end
})

-- Lazy.nvim - Plugin manager
local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"
if not vim.loop.fs_stat(lazypath) then
  vim.fn.system({
    "git", "clone", "--filter=blob:none",
    "https://github.com/folke/lazy.nvim.git", lazypath
  })
end
vim.opt.rtp:prepend(lazypath)

-- Plugins
require("lazy").setup({
  { "navarasu/onedark.nvim" },
  { "neovim/nvim-lspconfig" },
  {
    "hrsh7th/nvim-cmp",
    dependencies = {
      "hrsh7th/cmp-nvim-lsp",
      "L3MON4D3/LuaSnip",
    }
  },
  { "nvim-tree/nvim-tree.lua", dependencies = { "nvim-tree/nvim-web-devicons" } },
  { "nvim-lualine/lualine.nvim", dependencies = { "nvim-tree/nvim-web-devicons" } },
})

-- Tema One Dark
require('onedark').setup { style = 'dark' }
require('onedark').load()

-- LSP Python e C
local lspconfig = require("lspconfig")
lspconfig.pyright.setup {
  settings = { python = { pythonPath = "/usr/local/bin/python3" } },
}
lspconfig.clangd.setup{}

-- Autocompletion com ajuste do Tab
local cmp = require'cmp'
local luasnip = require'luasnip'

local has_words_before = function()
  local line, col = unpack(vim.api.nvim_win_get_cursor(0))
  return col ~= 0 and vim.api.nvim_buf_get_text(0, line - 1, 0, line - 1, col, {})[1]:match("%S")
end

cmp.setup({
  snippet = {
    expand = function(args)
      luasnip.lsp_expand(args.body)
    end,
  },
  mapping = {
    ['<Tab>'] = cmp.mapping(function(fallback)
      if cmp.visible() then
        cmp.select_next_item()
      elseif luasnip.expand_or_jumpable() then
        luasnip.expand_or_jump()
      elseif has_words_before() then
        cmp.complete()
      else
        fallback()
      end
    end, { "i", "s" }),

    ['<S-Tab>'] = cmp.mapping(function(fallback)
      if cmp.visible() then
        cmp.select_prev_item()
      elseif luasnip.jumpable(-1) then
        luasnip.jump(-1)
      else
        fallback()
      end
    end, { "i", "s" }),

    ['<CR>'] = cmp.mapping.confirm({ select = true }),
  },
  sources = { { name = 'nvim_lsp' } },
})

-- Nvim Tree
local api = require("nvim-tree.api")
require("nvim-tree").setup({
  view = {
    width = 30,
    side = "left",
  },
  actions = {
    open_file = {
      quit_on_open = false,
    },
  },
  on_attach = function(bufnr)
    local function opts(desc)
      return { desc = "nvim-tree: " .. desc, buffer = bufnr, noremap = true, silent = true, nowait = true }
    end

    api.config.mappings.default_on_attach(bufnr)

    vim.keymap.set('n', '<CR>', api.node.open.edit, opts('Open with focus'))
    vim.keymap.set('n', 'g', api.node.open.edit, opts('Open with focus'))

    vim.keymap.set('n', 'j', function()
      vim.cmd('normal! j')
      local node = api.tree.get_node_under_cursor()
      if node and not node.nodes then
        api.node.open.preview()
      end
    end, opts('Down and preview'))

    vim.keymap.set('n', 'k', function()
      vim.cmd('normal! k')
      local node = api.tree.get_node_under_cursor()
      if node and not node.nodes then
        api.node.open.preview()
      end
    end, opts('Up and preview'))

    vim.keymap.set('n', '<C-f>', api.tree.focus, opts('Focus on Tree'))
    vim.keymap.set('n', 'p', api.fs.paste, opts('Paste'))
  end,
})

vim.keymap.set('n', '<C-n>', ':NvimTreeToggle<CR>', { noremap = true, silent = true })
vim.keymap.set('n', '<C-f>', ':NvimTreeFocus<CR>', { noremap = true, silent = true })

-- Lualine
require('lualine').setup {
  options = { theme = 'onedark' }
}

-- Terminal para macOS (zsh)
vim.opt.shell = '/bin/zsh'
vim.opt.shellcmdflag = '-c'
vim.opt.shellquote = ''
vim.opt.shellxquote = ''

-- Comando :T abre terminal
vim.api.nvim_command('command! -nargs=0 T botright split | terminal')

-- Terminal inicia no modo insert
vim.api.nvim_create_autocmd('TermOpen', {
  pattern = '*',
  callback = function()
    vim.cmd('startinsert')
  end,
})

-- Terminal abre no diretório do arquivo atual
vim.api.nvim_create_autocmd('BufEnter', {
  pattern = '*',
  callback = function()
    vim.cmd('lcd %:p:h')
  end,
})
